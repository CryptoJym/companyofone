name: Deploy

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["Test"]
    types:
      - completed
    branches: [main]

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID_FRONTEND: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
  VERCEL_PROJECT_ID_BACKEND: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}

jobs:
  check-tests:
    name: Check Test Results
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'success' && github.event_name == 'workflow_run'
    steps:
      - name: Test failed
        run: |
          echo "Tests failed - cancelling deployment"
          exit 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.workflow_run.conclusion == 'success')
    environment: staging
    outputs:
      frontend-url: ${{ steps.deploy-frontend.outputs.url }}
      backend-url: ${{ steps.deploy-backend.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information (Frontend)
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Pull Vercel Environment Information (Backend)
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./backend

      - name: Build Frontend
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: staging

      - name: Build Backend
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./backend
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Deploy Frontend to Staging
        id: deploy-frontend
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --meta environment=staging)
          echo "url=$url" >> $GITHUB_OUTPUT
        working-directory: ./frontend

      - name: Deploy Backend to Staging
        id: deploy-backend
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --meta environment=staging)
          echo "url=$url" >> $GITHUB_OUTPUT
        working-directory: ./backend

      - name: Run Smoke Tests
        run: |
          # Wait for deployments to be ready
          sleep 30
          # Basic health checks
          curl -f ${{ steps.deploy-frontend.outputs.url }} || exit 1
          curl -f ${{ steps.deploy-backend.outputs.url }}/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information (Frontend)
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Pull Vercel Environment Information (Backend)
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./backend

      - name: Build Frontend
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: production

      - name: Build Backend
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./backend
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Deploy Frontend to Production
        id: deploy-frontend-prod
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
        working-directory: ./frontend

      - name: Deploy Backend to Production
        id: deploy-backend-prod
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
        working-directory: ./backend

      - name: Run Production Health Checks
        run: |
          # Wait for deployments to be ready
          sleep 60
          # Comprehensive health checks
          curl -f ${{ steps.deploy-frontend-prod.outputs.url }} || exit 1
          curl -f ${{ steps.deploy-backend-prod.outputs.url }}/health || exit 1
          # Performance check
          curl -w "%{time_total}" -o /dev/null -s ${{ steps.deploy-frontend-prod.outputs.url }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            üöÄ **Deployment successful!**
            
            **Frontend:** ${{ steps.deploy-frontend-prod.outputs.url }}
            **Backend:** ${{ steps.deploy-backend-prod.outputs.url }}
            
            **Changes in this release:**
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Notify Success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          # Add Slack/Discord notification here if needed

      - name: Notify Failure
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          # Add Slack/Discord notification here if needed