name: Performance Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run performance tests daily
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target environment for testing'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'

jobs:
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        url_type: [home, blog, api]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          cd frontend && npm ci && npm run build
          cd ../backend && npm ci && npm run build

      - name: Start application
        run: |
          cd backend && npm start &
          cd frontend && npm start &
          sleep 30

      - name: Setup Lighthouse
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          case "${{ matrix.url_type }}" in
            "home")
              URL="http://localhost:3000"
              ;;
            "blog")
              URL="http://localhost:3000/blog"
              ;;
            "api")
              URL="http://localhost:3000/api/health"
              ;;
          esac
          
          lhci autorun --upload.target=temporary-public-storage --collect.url=$URL

      - name: Save Lighthouse Results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results-${{ matrix.url_type }}
          path: .lighthouseci

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -L | tar xvz
          sudo mv k6-v0.47.0-linux-amd64/k6 /usr/local/bin

      - name: Build and start application
        run: |
          npm run install:all
          cd backend && npm run build && npm start &
          cd ../frontend && npm run build && npm start &
          sleep 30

      - name: Run Load Tests
        run: |
          # Create load test script
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            stages: [
              { duration: '2m', target: 10 }, // Ramp up
              { duration: '5m', target: 10 }, // Stay at 10 users
              { duration: '2m', target: 20 }, // Ramp up to 20 users
              { duration: '5m', target: 20 }, // Stay at 20 users
              { duration: '2m', target: 0 },  // Ramp down
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'], // 95% of requests must complete below 500ms
              http_req_failed: ['rate<0.01'],   // Error rate must be below 1%
            },
          };

          export default function() {
            let response = http.get('http://localhost:3000');
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
            
            // Test API endpoints
            response = http.get('http://localhost:3000/api/health');
            check(response, {
              'API health status is 200': (r) => r.status === 200,
            });
            
            sleep(1);
          }
          EOF
          
          k6 run --out json=load-test-results.json load-test.js

      - name: Upload Load Test Results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: load-test-results.json

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci

      - name: Build frontend
        run: |
          cd frontend && npm run build

      - name: Analyze bundle size
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read build statistics
            const buildPath = './frontend/.next';
            if (fs.existsSync(buildPath)) {
              const buildManifest = JSON.parse(fs.readFileSync(path.join(buildPath, 'build-manifest.json'), 'utf8'));
              
              let totalSize = 0;
              const bundleInfo = [];
              
              // Calculate bundle sizes (simplified)
              for (const [route, files] of Object.entries(buildManifest.pages)) {
                for (const file of files) {
                  const filePath = path.join(buildPath, 'static', file);
                  if (fs.existsSync(filePath)) {
                    const stats = fs.statSync(filePath);
                    totalSize += stats.size;
                    bundleInfo.push({
                      route,
                      file: file.split('/').pop(),
                      size: (stats.size / 1024).toFixed(2) + ' KB'
                    });
                  }
                }
              }
              
              // Create summary
              const summary = `## üì¶ Bundle Size Analysis\n\nTotal bundle size: ${(totalSize / 1024 / 1024).toFixed(2)} MB\n\n| Route | File | Size |\n|-------|------|------|\n${bundleInfo.slice(0, 10).map(info => `| ${info.route} | ${info.file} | ${info.size} |`).join('\n')}`;
              
              await core.summary.write(summary);
              
              // Set output for potential alerts
              if (totalSize > 5 * 1024 * 1024) { // 5MB threshold
                core.setFailed(`Bundle size too large: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);
              }
            }

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm run install:all
          npm install -g clinic

      - name: Memory Profile Backend
        run: |
          cd backend
          timeout 60s clinic doctor --on-port='curl http://localhost:3000/health' -- npm start || true

      - name: Upload Memory Profile
        uses: actions/upload-artifact@v4
        with:
          name: memory-profile
          path: backend/.clinic/

  performance-report:
    name: Performance Report
    needs: [lighthouse-audit, load-testing, bundle-analysis, memory-profiling]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download Lighthouse Results
        uses: actions/download-artifact@v4
        with:
          pattern: lighthouse-results-*
          merge-multiple: true

      - name: Download Load Test Results
        uses: actions/download-artifact@v4
        with:
          name: load-test-results

      - name: Generate Performance Report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let report = '## üöÄ Performance Test Report\n\n';
            
            // Lighthouse results
            report += '### Lighthouse Audit Results\n';
            const lighthouseFiles = fs.readdirSync('.').filter(f => f.includes('lighthouse'));
            if (lighthouseFiles.length > 0) {
              report += '| Page | Performance | Accessibility | Best Practices | SEO |\n';
              report += '|------|-------------|---------------|----------------|-----|\n';
              report += '| Home | ‚è≥ Processing | ‚è≥ Processing | ‚è≥ Processing | ‚è≥ Processing |\n';
            }
            
            // Load test results
            if (fs.existsSync('load-test-results.json')) {
              report += '\n### Load Testing Results\n';
              try {
                const loadData = fs.readFileSync('load-test-results.json', 'utf8').split('\n').filter(line => line.trim());
                const lastResult = JSON.parse(loadData[loadData.length - 1]);
                
                if (lastResult.type === 'Point') {
                  const metric = lastResult.metric;
                  const value = lastResult.data.value;
                  
                  report += `- **${metric}**: ${value}\n`;
                }
              } catch (e) {
                report += '- Load test data parsing failed\n';
              }
            }
            
            // Bundle analysis
            report += '\n### Bundle Analysis\n';
            report += `- Bundle size check: ${{ needs.bundle-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}\n`;
            
            // Memory profiling
            report += '\n### Memory Profiling\n';
            report += `- Memory profile: ${{ needs.memory-profiling.result == 'success' && '‚úÖ Completed' || '‚ùå Failed' }}\n`;
            
            await core.summary.write(report);